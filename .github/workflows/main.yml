name: Build Installer

on:
  push:
    branches:
      - main

jobs:
#   buildInstallerForWindows:
#     name: Build for windows
#     runs-on: windows-2019 #For docker error in windows-latest
#     strategy:
#       fail-fast: false
    
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#           lfs: true

#       - name: Get current date for build generation
#         id: date
#         run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

#       - name: Cache for windows
#         uses: actions/cache@v2
#         with:
#           path: creator/Library
#           key: Library-creator-StandaloneWindows64-${{
#             hashFiles('creator/**') }}
#           restore-keys: |
#             Library-creator-StandaloneWindows64-
#             Library-creator-
#             Library-

#       - name: Setup Preprocessor for build
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           projectPath: creator
#           targetPlatform: StandaloneWindows64
#           buildMethod: Earth9Builder.BuildScript.BuildCreator

#       - name: Build Play for windows
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           projectPath: creator
#           targetPlatform: StandaloneWindows64
#           buildMethod: Earth9Builder.BuildScript.BuildPlay
#           allowDirtyBuild: true
          
#       - name: Build Creator for windows
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           projectPath: creator
#           targetPlatform: StandaloneWindows64
#           buildMethod: Earth9Builder.BuildScript.BuildCreator
#           allowDirtyBuild: true

# #       - name: Build Admin for windows
# #         uses: game-ci/unity-builder@v2
# #         env:
# #           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
# #           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
# #           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
# #         with:
# #           projectPath: creator
# #           targetPlatform: StandaloneWindows64
# #           buildMethod: Earth9Builder.BuildScript.BuildAdmin
# #           allowDirtyBuild: true

#       - name: Building the installer
#         run: |
#           "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "earth9-installer.iss"
#         shell: cmd
          
#       - name: Upload the installer as an artifact
#         uses: actions/upload-artifact@v2
#         if: ${{ github.event_name != 'pull_request' }}
#         with:
#           path: "Output"
#           name: Setup-Windows-${{ steps.date.outputs.date }}
          
#       - name: Create zip of admin-build
#         uses: vimtor/action-zip@v1
#         with:
#           files: creator/build/windows/earth9-admin/
#           recursive: true
#           dest: admin-build-${{ steps.date.outputs.date }}.zip

#       - name: Upload admin-build.zip to Google Drive
#         uses: adityak74/google-drive-upload-git-action@main
#         with:
#           credentials: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
#           filename: admin-build-${{ steps.date.outputs.date }}.zip
#           overwrite: true
#           folderId: ${{ secrets.GOOGLE_DRIVE_FOLDER }}

  buildInstallerForMacOS:
    name: Build Installer for MacOS
    runs-on: macos-latest
#     needs: buildInstallerForWindows
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - creator
      
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
          
      - name: Get current date for build generation
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
        
      - name: Cache for Mac
        uses: actions/cache@v2
        with:
          path: creator/Library
          key: Library-creator-StandaloneOSX-${{
            hashFiles('creator/**') }}
          restore-keys: |
            Library-creator-StandaloneOSX-
            Library-creator-
            Library-
            
      - name: Setup Preprocessor for build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: StandaloneOSX
          buildMethod: Earth9Builder.BuildScript.BuildPlay
          
      - name: Build Creator for Mac
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: StandaloneOSX
          buildMethod: Earth9Builder.BuildScript.BuildCreator
          allowDirtyBuild: true

#       - name: Build Admin for Mac
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           projectPath: ${{ matrix.projectPath }}
#           targetPlatform: StandaloneOSX
#           buildMethod: Earth9Builder.BuildScript.BuildAdmin

      - name: Codesign Play mode app bundle
        # Extract the secrets we defined earlier as environment variables
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          ls -R
          # Turn our base64-encoded certificate back to a regular .p12 file
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          # We finally codesign our app bundle, specifying the Hardened runtime option
          
          # echo
          # find ./creator/build/mac/earth9/earth9.app/Contents/Plugins/FFmpegEncoder.bundle -name "*.meta" -delete
          
          # chmod -R a+xr "creator/build/mac/earth9/earth9.app/Contents/Plugins/FFmpegEncoder.bundle"
          # /usr/bin/codesign --deep --force --verify --verbose --timestamp --options runtime --sign "$MACOS_CERTIFICATE_NAME" "creator/build/mac/earth9/earth9.app/Contents/Plugins/FFmpegEncoder.bundle"
    
          chmod -R a+xr "creator/build/mac/earth9/earth9.app"
          
          /usr/bin/codesign --deep --force --verify --verbose --timestamp --options runtime --entitlements "Earth9.entitlements" --sign "$MACOS_CERTIFICATE_NAME" "creator/build/mac/earth9/earth9.app"
          
          
      - name: "Notarize Play mode app bundle"
        # Extract the secrets we defined earlier as environment variables
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI
          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "creator/build/mac/earth9/earth9.app" "earth9.zip"
          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "earth9.zip" --keychain-profile "notarytool-profile" --wait
          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "creator/build/mac/earth9/earth9.app"
          
      - name: Building the installer
        run: |
          brew install create-dmg
          create-dmg --volname "Earth9 installer" --background "installer_background.png" --window-pos 200 120 --window-size 800 450 --icon-size 100 --icon "creator/build/mac/earth9/earth9.app" 200 190 --app-drop-link 600 185 --eula "license.rtf" "earth9.dmg" "creator/build/mac/earth9/earth9.app"
      - uses: actions/upload-artifact@v2
        with:
          name: Setup-Mac-Play-${{ steps.date.outputs.date }}
          path: earth9.dmg
          
      - name: Codesign Creator mode app bundle
        run: |
          chmod -R a+xr "creator/build/mac/earth9-creator/earth9-creator.app"
          
          /usr/bin/codesign --deep --force --verify --verbose --timestamp --options runtime --entitlements "Earth9.entitlements" --sign "$MACOS_CERTIFICATE_NAME" "creator/build/mac/earth9-creator/earth9-creator.app"
          
          
      - name: "Notarize Creator mode app bundle"
        run: |
          
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "creator/build/mac/earth9-creator/earth9-creator.app" "earth9-creator.zip"
          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "earth9-creator.zip" --keychain-profile "notarytool-profile" --wait
          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "creator/build/mac/earth9-creator/earth9-creator.app"
          
      - name: Building the installer
        run: |
          brew install create-dmg
          create-dmg --volname "Earth9 Creator installer" --background "installer_background.png" --window-pos 200 120 --window-size 800 450 --icon-size 100 --icon "creator/build/mac/earth9-creator/earth9-creator.app" 200 190 --app-drop-link 600 185 --eula "license.rtf" "earth9-creator.dmg" "creator/build/mac/earth9-creator/earth9-creator.app"
      - uses: actions/upload-artifact@v2
        with:
          name: Setup-Mac-Creator-${{ steps.date.outputs.date }}
          path: earth9-creator.dmg
