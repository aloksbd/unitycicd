name: Build creator project

on: 
#   workflow_dispatch
  push:
    branches: [main]

jobs:
#   buildCreatorForWindows:
#     name: Build Creator for Windows
#     runs-on: windows-2019
#     strategy:
#       fail-fast: false
#       matrix:
#         projectPath:
#           - creator
#         targetPlatform:
#           - StandaloneWindows64 # Build a Windows 64-bit standalone.
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#           lfs: true
#       - uses: actions/cache@v2
#         with:
#           path: ${{ matrix.projectPath }}/Library
#           key:
#             Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
#             hashFiles(matrix.projectPath) }}
#           restore-keys: |
#             Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
#             Library-${{ matrix.projectPath }}-
#             Library-
#       - name: Build game
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           projectPath: ${{ matrix.projectPath }}
#           targetPlatform: ${{ matrix.targetPlatform }}
#           buildMethod: Earth9Builder.BuildScript.BuildCreator
#       - name: Building the installer
#         run: | 
#           "c:\Program Files (x86)\WiX Toolset v3.11\bin\candle.exe" Creator-Msi.wxs
#           "c:\Program Files (x86)\WiX Toolset v3.11\bin\light.exe" -ext WixUIExtension -cultures:en-us Creator-Msi.wixobj -out Earth9-Creator.msi
#         shell: cmd
#       - name: Upload the installer as an artifact
#         uses: actions/upload-artifact@v2
#         with:
#           path: "Earth9-Creator.msi"
#           name: Earth9-Creator
          
#   buildPlayForWindows:
#     name: Build Play for Windows
#     runs-on: windows-2019
#     strategy:
#       fail-fast: false
#       matrix:
#         projectPath:
#           - creator
#         targetPlatform:
#           - StandaloneWindows64 # Build a Windows 64-bit standalone.
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#           lfs: true
#       - uses: actions/cache@v2
#         with:
#           path: ${{ matrix.projectPath }}/Library
#           key:
#             Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
#             hashFiles(matrix.projectPath) }}
#           restore-keys: |
#             Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
#             Library-${{ matrix.projectPath }}-
#             Library-
#       - name: Build game
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           projectPath: ${{ matrix.projectPath }}
#           targetPlatform: ${{ matrix.targetPlatform }}
#           buildMethod: Earth9Builder.BuildScript.BuildPlay
#           customParameters:  -quit -batchmode
#       - name: Building the installer
#         run: | 
#           "c:\Program Files (x86)\WiX Toolset v3.11\bin\candle.exe" Play-Msi.wxs
#           "c:\Program Files (x86)\WiX Toolset v3.11\bin\light.exe" -ext WixUIExtension -cultures:en-us Play-Msi.wixobj -out Earth9.msi
#         shell: cmd
#       - name: Upload the installer as an artifact
#         uses: actions/upload-artifact@v2
#         with:
#           path: "Earth9.msi"
#           name: Earth9-Play.msi
          
          
          
          
#   builCreatorForMacOS:
#     name: Build Creator for MacOS
#     runs-on: macos-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         projectPath:
#           - creator
#         targetPlatform:
#           - StandaloneOSX 
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#           lfs: true
#       - uses: actions/cache@v2
#         with:
#           path: ${{ matrix.projectPath }}/Library
#           key:
#             Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
#             hashFiles(matrix.projectPath) }}
#           restore-keys: |
#             Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
#             Library-${{ matrix.projectPath }}-
#             Library-
#       - name: Building game 
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           projectPath: ${{ matrix.projectPath }}
#           targetPlatform: ${{ matrix.targetPlatform }}
#           buildMethod: Earth9Builder.BuildScript.BuildCreator
#           customParameters:  -quit -batchmode
#       - name: Run chmod
#         run: | 
#           chmod +x creator/build/mac/Earth9-Creator/Earth9-Creator.app/Contents/MacOS/*
#         shell: sh
#       - name: Run xattr
#         run: | 
#           xattr -cr creator/build/mac/Earth9-Creator/Earth9-Creator.app
#         shell: sh
#       - name: Building the installer
#         run: | 
#           brew install create-dmg
#           create-dmg --volname "Earth9-Creator installer" --background "installer_background.png" --window-pos 200 120 --window-size 800 450 --icon-size 100 --icon "Earth9-Creator.app" 200 190 --app-drop-link 600 185 --eula "lic.rtf" "Earth9-Creator.dmg" "creator/build/mac/Earth9-Creator/Earth9-Creator.app"
        
#       - name: Upload installer
#         uses: actions/upload-artifact@v2
#         if: ${{ github.event_name != 'pull_request' }}
#         with:
#           path: Earth9-Creator.dmg
#           name: Earth9-Creator.dmg
          
  buildPlayForMacOS:
    name: Build Play for MacOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - creator
        targetPlatform:
          - StandaloneOSX 
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key:
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
            hashFiles(matrix.projectPath) }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Earth9Builder.BuildScript.BuildPlay
          
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Earth9Builder.BuildScript.BuildPlay
          allowDirtyBuild: true
        
        
#       - name: Fix File Permissions and Code-Sign
#         env:
#           APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#           APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
#           APPLE_DISTRIBUTION_CERTIFICATE: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}
#           APPLE_DISTRIBUTION_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_PASSWORD }}
#           MAC_INSTALLER_CERTIFICATE: ${{ secrets.MAC_INSTALLER_CERTIFICATE }}
#           MAC_INSTALLER_PASSWORD: ${{ secrets.MAC_INSTALLER_PASSWORD }}
#           MAC_APP_BUNDLE_PATHS: Contents/PlugIns/StandaloneFileBrowser.bundle
#           MAC_BUILD_PATH: creator/build/mac/Earth9/
#           PROJECT_NAME: Earth9
#         run: |
#           find $MAC_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
#           chmod +x sign-mac-build.sh
#           ./sign-mac-build.sh
          
      
#       - name: Building the installer
#         run: | 
#           brew install create-dmg
#           create-dmg --volname "Earth9 installer" --background "installer_background.png" --window-pos 200 120 --window-size 800 450 --icon-size 100 --icon "Earth9.app" 200 190 --app-drop-link 600 185 --eula "lic.rtf" "Earth9.dmg" "creator/build/mac/Earth9/Earth9.app"
                  
                  
      - name: Codesign app bundle
  # Extract the secrets we defined earlier as environment variables
        env: 
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          # Turn our base64-encoded certificate back to a regular .p12 file
          ls -lahR ./creator/build/StandaloneOSX
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12 

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment

          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # We finally codesign our app bundle, specifying the Hardened runtime option
          echo
          find ./creator/build/StandaloneOSX/Earth9/Earth9.app/Contents/Plugins/UnityFbxSdkNative.bundle -name "*.meta" -delete
          
          chmod -R a+xr "creator/build/StandaloneOSX/Earth9/Earth9.app/Contents/Plugins/UnityFbxSdkNative.bundle"

          /usr/bin/codesign --deep --force --verify --verbose --timestamp --options runtime --sign "$MACOS_CERTIFICATE_NAME" "creator/build/StandaloneOSX/Earth9/Earth9.app/Contents/Plugins/UnityFbxSdkNative.bundle"
    
          chmod -R a+xr "creator/build/StandaloneOSX/Earth9/Earth9.app"
          
          /usr/bin/codesign --deep --force --verify --verbose --timestamp --options runtime --entitlements "Earth9.entitlements" --sign "$MACOS_CERTIFICATE_NAME" "creator/build/StandaloneOSX/Earth9/Earth9.app"
    
          ditto -c -k --sequesterRsrc --keepParent "creator/build/StandaloneOSX/Earth9/Earth9.app" "Earth9.zip"
          
          xcrun altool --notarize-app --username $PROD_MACOS_NOTARIZATION_APPLE_ID --password $PROD_MACOS_NOTARIZATION_PWD --asc-provider $PROD_MACOS_NOTARIZATION_TEAM_ID --primary-bundle-id com.DefaultCompany.Earth9 --file ./Earth9.zip --wait
          
          echo "Attach staple"
          spctl -a -v ./creator/build/StandaloneOSX/Earth9/Earth9.app
          xcrun stapler staple "creator/build/StandaloneOSX/Earth9/Earth9.app"
          
          
          
#       - name: "Notarize app bundle"
#         # Extract the secrets we defined earlier as environment variables
#         env:
#           PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
#           PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
#           PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
#         run: |
#           # Store the notarization credentials so that we can prevent a UI password dialog
#           # from blocking the CI

#           echo "Create keychain profile"
#           xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

#           # We can't notarize an app bundle directly, but we need to compress it as an archive.
#           # Therefore, we create a zip file containing our app bundle, so that we can send it to the
#           # notarization service

#           echo "Creating temp notarization archive"
#           ditto -c -k --sequesterRsrc --keepParent "creator/build/StandaloneOSX/Earth9/Earth9.app" "Earth9.zip"

#           # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
#           # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
#           # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
#           # you're curious

#           echo "Notarize app"
#           xcrun notarytool submit "Earth9.zip" --keychain-profile "notarytool-profile" --wait

#           # Finally, we need to "attach the staple" to our executable, which will allow our app to be
#           # validated by macOS even when an internet connection is not available.
#           echo "Attach staple"
#           xcrun stapler staple "creator/build/StandaloneOSX/Earth9/Earth9.app"
          
      - uses: actions/upload-artifact@v2
        with:
          name: builds
          path: Earth9.zip
#       - name: Upload public folder to Google Drive
#         uses: Jodebu/upload-to-drive@master
#         with:
#           target: creator/build
#           credentials: secrets.<GOOGLE_DRIVE_CREDENTIALS>
#           folder: <GOOGLE_DRIVE_FOLDER>
